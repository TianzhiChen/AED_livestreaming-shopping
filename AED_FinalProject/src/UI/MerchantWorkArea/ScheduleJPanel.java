/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.MerchantWorkArea;

import Business.Business;
import Business.Merchant.Merchant;
import Business.ProductCatalog.Product;
import Business.ProductSchedule.ProductOffer;
import Business.ProductSchedule.Schedule;
import Business.UserAccount.UserAccount;
import java.util.Date;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;

/**
 *
 * @author tianzhichen
 */
public class ScheduleJPanel extends javax.swing.JPanel {

    Business business;
    UserAccount userAccount;
    DefaultTableModel planTableModel;

    DefaultTableModel liveScheTableModel;

    /**
     * Creates new form scheduleJPanel
     */
    public ScheduleJPanel() {
        initComponents();
    }

    public ScheduleJPanel(Business business, UserAccount userAccount) {
        initComponents();
        this.business = business;
        this.userAccount = userAccount;

        this.planTableModel = (DefaultTableModel) planTable.getModel();
        this.liveScheTableModel = (DefaultTableModel) liveScheTable.getModel();

        populatePlans();
        populateProDp();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        planTable = new javax.swing.JTable();
        deleteScheduleBtn = new javax.swing.JButton();
        fieldScheduleName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        scheBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        fieldStock = new javax.swing.JTextField();
        deleteProOfferBtn = new javax.swing.JButton();
        updateProOfferBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        startLiveBtn = new javax.swing.JButton();
        updateScheduleBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        liveScheTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        addScheduleBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        proBox = new javax.swing.JComboBox();
        assignBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        planTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Schedule Name", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        planTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                planTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(planTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 310, 240));

        deleteScheduleBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        deleteScheduleBtn.setText("Delete");
        deleteScheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteScheduleBtnActionPerformed(evt);
            }
        });
        add(deleteScheduleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 90, -1));
        add(fieldScheduleName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 170, 30));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setText("Schedule Date");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setText("Schedule Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));
        add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 170, 30));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel3.setText("Schedule");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, -1, -1));

        add(scheBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, 130, 30));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel4.setText("Stock");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, 60, 20));
        add(fieldStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 230, 130, 30));

        deleteProOfferBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        deleteProOfferBtn.setText("Delete Livesteaming Product");
        deleteProOfferBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProOfferBtnActionPerformed(evt);
            }
        });
        add(deleteProOfferBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 500, 260, 30));

        updateProOfferBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        updateProOfferBtn.setText("Update Livesteaming Product");
        updateProOfferBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProOfferBtnActionPerformed(evt);
            }
        });
        add(updateProOfferBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 440, 260, 30));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel5.setText("View Livestreaming Product Schedule");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, -1, -1));

        startLiveBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        startLiveBtn.setText("Start Live Streaming");
        startLiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startLiveBtnActionPerformed(evt);
            }
        });
        add(startLiveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 500, 190, 30));

        updateScheduleBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        updateScheduleBtn.setText("Update");
        updateScheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateScheduleBtnActionPerformed(evt);
            }
        });
        add(updateScheduleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 90, -1));

        liveScheTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Schedule", "Date", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(liveScheTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 410, 310));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel6.setText("Livestreaming Schedule Manegement");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        addScheduleBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        addScheduleBtn.setText("Create");
        addScheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addScheduleBtnActionPerformed(evt);
            }
        });
        add(addScheduleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 90, -1));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel7.setText("Product");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, -1));

        add(proBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 130, 30));

        assignBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        assignBtn.setText("ASSIGN");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });
        add(assignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 300, 110, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/shopping-cart.png"))); // NOI18N
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 540, 600));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pawel-czerwinski-QY5U8JD3-tk-unsplash.jpg"))); // NOI18N
        jLabel8.setText("jLabel8");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -60, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void startLiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startLiveBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = planTable.getSelectedRow();
        if (selectedRow >= 0) {
            Schedule s = (Schedule) planTable.getValueAt(selectedRow, 0);
            s.setStatus(Schedule.Status.START);
            JOptionPane.showMessageDialog(null, "Livestreaming starts!");
            populatePlans();
        }

    }//GEN-LAST:event_startLiveBtnActionPerformed

    private void addScheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addScheduleBtnActionPerformed
        // TODO add your handling code here:
        String scheName = fieldScheduleName.getText();
        Date scheDate = dateChooser.getDate();
        Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());
        if (m != null) {
            Schedule createdSchedule = m.getScheduleDirectory().createSchedule(scheName, scheDate);
            if (createdSchedule != null) {
                createdSchedule.setStatus(Schedule.Status.PENDING);
                populatePlans();
                populateScheDp();
            } 
        }
    }//GEN-LAST:event_addScheduleBtnActionPerformed

    private void updateScheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateScheduleBtnActionPerformed
        // TODO add your handling code here:
        // get table model
//        DefaultTableModel planTableModel = (DefaultTableModel) planTable.getModel();
//        if (planTable.getSelectedRowCount() == 1) {
//            // if single row is selected then update
//            String scheName = fieldScheduleName.getText();
//            Date scheDate = dateChooser.getDate();
//            
//            // set updated value 
//            planTableModel.setValueAt(scheName, planTable.getSelectedRow(), 0);
//            planTableModel.setValueAt(scheDate, planTable.getSelectedRow(), 1);           
//        }
        int selectedRow = planTable.getSelectedRow();

        if (selectedRow >= 0) {
            // we can directly fetch the applicant detail from the Zeroth position
            Schedule s = (Schedule) planTable.getValueAt(selectedRow, 0);
            s.setName(fieldScheduleName.getText());
            s.setDate(dateChooser.getDate());
            JOptionPane.showMessageDialog(null, "Updated successfully！");
        } else {
            JOptionPane.showMessageDialog(null, "You have not made any selection");
        }
        populatePlans();
        populateScheDp();
    }//GEN-LAST:event_updateScheduleBtnActionPerformed

    private void planTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_planTableMouseClicked
        // TODO add your handling code here:
        //set data to their textfield
        DefaultTableModel planTableModel = (DefaultTableModel) planTable.getModel();

        // set data to text field when row is selected
        String scheName = planTableModel.getValueAt(planTable.getSelectedRow(), 0).toString();
        Date scheDate = (Date) planTableModel.getValueAt(planTable.getSelectedRow(), 1);

        // set the textfield
        fieldScheduleName.setText(scheName);
        dateChooser.setDate(scheDate);
    }//GEN-LAST:event_planTableMouseClicked

    private void deleteScheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteScheduleBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = planTable.getSelectedRow();

        if (selectedRow >= 0) {
            // we will delete the object
            Schedule s = (Schedule) planTable.getValueAt(selectedRow, 0);
            Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());
            m.getScheduleDirectory().removeSchedule(s.getName(), s.getDate());
            JOptionPane.showMessageDialog(null, "Deleted successfully！");
            populatePlans();
            populateScheDp();
        } else {
            JOptionPane.showMessageDialog(null, "You have not made any selection");
        }
    }//GEN-LAST:event_deleteScheduleBtnActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:

        Schedule schedule = (Schedule) scheBox.getSelectedItem();
        Product product = (Product) proBox.getSelectedItem();
        int stock = Integer.valueOf(fieldStock.getText());
        schedule.addProductOffer(product, stock);
        int saleNum = schedule.getProductMap().get(product.getProductName()).getSaleNum();
        populateLiveSche();
    }//GEN-LAST:event_assignBtnActionPerformed

    private void updateProOfferBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProOfferBtnActionPerformed
        // TODO add your handling code here:
        Schedule schedule = (Schedule) scheBox.getSelectedItem();
        Product product = (Product) proBox.getSelectedItem();
        int stock = Integer.valueOf(fieldStock.getText());
        schedule.updateStock(product, stock);
        Date date = schedule.getDate();
        int saleNum = schedule.getProductMap().get(product.getProductName()).getSaleNum();
        populateLiveSche();
    }//GEN-LAST:event_updateProOfferBtnActionPerformed

    private void deleteProOfferBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProOfferBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = liveScheTable.getSelectedRow();
        if (selectedRow >= 0) {
            // we will delete the object
            Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());
            ProductOffer po = (ProductOffer) liveScheTable.getValueAt(selectedRow, 0);
            Double price = (Double) liveScheTable.getValueAt(selectedRow, 1);
            Schedule s = (Schedule) liveScheTable.getValueAt(selectedRow, 2);
     
            m.getScheduleDirectory().removeSchedule(s.getName(), s.getDate());
            JOptionPane.showMessageDialog(null, "Deleted successfully!");
            populateLiveSche();
            
        }
    }//GEN-LAST:event_deleteProOfferBtnActionPerformed

    public void populatePlans() {
        planTableModel.setRowCount(0);
        Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());

        for (Schedule s : m.getScheduleDirectory().getScheduleList()) {
            Object row[] = new Object[3];
            row[0] = s;
            row[1] = s.getDate();
            row[2] = s.getStatus();
            planTableModel.addRow(row);
        }
    }

    public void populateLiveSche() {
        liveScheTableModel.setRowCount(0);
        Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());
        for (Schedule s: m.getScheduleDirectory().getScheduleList()) {
            for (Map.Entry<String, ProductOffer> map: s.getProductMap().entrySet()) {
                ProductOffer po = map.getValue();
                SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                String dateString = formatter.format(s.getDate());

                Object row[] = new Object[5];
                row[0] = po;
                row[1] = po.getProduct().getProductPrice();
                row[2] = s;
                row[3] = dateString;
                row[4] = po.getStock();
//                row[5] = po.getSaleNum();
                liveScheTableModel.addRow(row);
            }
            
        }
        
        

    }

    public void populateScheDp() {
        scheBox.removeAllItems();
        Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());
        for (Schedule s : m.getScheduleDirectory().getScheduleList()) {
            scheBox.addItem(s);
        }
    }

    public void populateProDp() {
        proBox.removeAllItems();
        Merchant m = this.business.getMerchantDirectory().findMerchantByName(this.userAccount.getUsername());
        for (Product p : m.getProductCatalog().getProductList()) {
            proBox.addItem(p);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addScheduleBtn;
    private javax.swing.JButton assignBtn;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton deleteProOfferBtn;
    private javax.swing.JButton deleteScheduleBtn;
    private javax.swing.JTextField fieldScheduleName;
    private javax.swing.JTextField fieldStock;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable liveScheTable;
    private javax.swing.JTable planTable;
    private javax.swing.JComboBox proBox;
    private javax.swing.JComboBox scheBox;
    private javax.swing.JButton startLiveBtn;
    private javax.swing.JButton updateProOfferBtn;
    private javax.swing.JButton updateScheduleBtn;
    // End of variables declaration//GEN-END:variables
}
